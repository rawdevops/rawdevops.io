import React from 'react';
import clsx from 'clsx';
import styles from './styles.module.css';

type FeatureItem = {
  title: string;
  Svg: React.ComponentType<React.ComponentProps<'svg'>>;
  description: JSX.Element;
};

const FeatureList: FeatureItem[] = [
  {
    title: 'CODE',
    Svg: require('@site/static/img/homepagefeatures/code.svg').default,
    description: (
      <>
        Desembarcamos na Gataria como DevOps! √â uma rede social exclusiva para gatos, e aqui estamos no nosso primeiro dia de trabalho.

Primeiro, navegaremos no site para entender o que os devs j√° constru√≠ram. A arquitetura baseada em microservi√ßos nos chamou a aten√ß√£o - uma escolha inteligente!

E finalmente √© hora de colocar a m√£o na massa! Iniciaremos o c√≥digo de todos os microservi√ßos, tudo pela linha de comando. E vamos fazer tudo funcionar perfeitamente!

Escolhemos o GitHub para hospedarmos nosso c√≥digo, a maior plataforma git do mundo. E voc√™ sabia que l√° est√£o reunidos TODOS os projetos das ferramentas que usaremos neste curso? √â incr√≠vel, n√©?

C√≥digo rodando e c√≥digo no GitHUb. Agora √© implementar nossas aplica√ß√µes em containers Docker. Vamos tornar tudo ainda mais pr√°tico e √°gil.
      </>
    ),
  },
  {
    title: 'BUILD',
    Svg: require('@site/static/img/homepagefeatures/build.svg').default,
    description: (
      <>
        Precisamos empacotar o nosso c√≥digo em containers e utilizaremos o Docker para isso!

Vamos criar arquivos `Dockerfile` para cada um dos microservi√ßos. E ent√£o `docker build` para gerar nas nossas imagens.

Images criadas, vamos rodar elas em conjunto e garantir que elas estejam se comunicando.

Maravilha! Conseguimos, agora vamos enviar nossas images pro docker hub e concluiremos mais um m√≥dulo!

Ah e com isso j√° estamos prontos para dar o pr√≥ximo passo e colocar a Gataria no Kubernetes üï∏Ô∏è!
      </>
    ),
  },
  {
    title: 'TESTE',
    Svg: require('@site/static/img/homepagefeatures/test.svg').default,
    description: (
      <>
        Automa√ß√£o √© a palavra-chave para o sucesso do c√≥digo da gataria!

Percebemos que os desenvolvedores j√° criaram alguns testes e estavam executando-os manualmente.

Queremos garantir a qualidade do nosso trabalho, por isso, estamos introduzindo testes automatizados em nossas pipelines CI/CD. Isso significa que toda vez que novos c√≥digos forem adicionados √†s nossas branchs com CI/CD, os testes ser√£o executados automaticamente, garantindo que tudo funcione perfeitamente!
      </>
    ),
  },
  {
    title: 'Release',
    Svg: require('@site/static/img/homepagefeatures/release.svg').default,
    description: (
      <>
        Chegou o momento especial em que nosso c√≥digo est√° pronto para ir para produ√ß√£o! Finalmente, os esfor√ßos do desenvolvedor ganhar√£o vida e estar√£o dispon√≠veis para todos os nossos usu√°rios.

E a nossa pipeline CI/CD precisa de um passo a mais quando vamos para produ√ß√£o! O Release!

Mas primeiro vamos definir uma estrategia de Git Flow real! Afinal a nossa infraestrutura vai caminhar junto com o git!

Agora, vamos entender o que √© versionamento sem√¢ntico! E a gente passa a ver o SemVer em todo lugar depois. E melhor vamos colocar para que as trocas das vers√µes tamb√©m sejam feitas de maneira autom√°tica!

Com essas duas estrat√©gias s√≥lidas definidas, estamos prestes a criar um Release incr√≠vel diretamente no Github! E o melhor de tudo: automatizado! 
      </>
    ),
  },
  {
    title: 'DEPLOY',
    Svg: require('@site/static/img/homepagefeatures/deploy.svg').default,
    description: (
      <>
√â hora do deploy! Chegou o momento de trocar a imagem dos containers antigos pela nova, tanto no ambiente de desenvolvimento quanto na produ√ß√£o!

Nada de preocupa√ß√µes agora, pois com o Kubernetes, nosso deploy ser√° feito sem Downtime, garantindo uma transi√ß√£o suave e fluida.

E a estrela do show √© o Helm! Al√©m de cuidar dos nossos deploys, o Helm tamb√©m √© um capaz de fazer rollbacks! Nessa √°rea, j√° ouviu falar que mais importante que fazer deploys r√°pido, √© fazer rollbacks r√°pidos? Caso algo de errado! E o Helm esta aqui para isto, deploys e rollbacks.

Tamb√©m vamos criar Helm charts pr√≥prios para as apps da Gataria

Mas a melhor parte √© que n√£o faremos o deploy manualmente, teremos um processo totalmente automatizado! √â aqui que entra o Github Actions, nossa plataforma de CI/CD. Durante o Bootcamp, construiremos nossas pipelines do zero!

Ent√£o, resumindo: o Helm ser√° respons√°vel pelos deploys e rollbacks, enquanto o Github Actions automatizar√° tudo o que for poss√≠vel! 
      </>
    ),
  },
  {
    title: 'OPERATE',
    Svg: require('@site/static/img/homepagefeatures/operate.svg').default,
    description: (
      <>
       Vamos levar a Gataria para o mundo do Kubernetes! 

Com o poder do Kubernetes, iremos segmentar nossos ambientes em Dev e Prod usando namespaces. Os devs poder√£o visualizar as altera√ß√µes no c√≥digo no ambiente Dev, que ser√° semelhante ao ambiente de Produ√ß√£o. Assim, ficar√£o mais tranquilos ao realizar o deploy na produ√ß√£o.

Al√©m disso, vamos aprender a configurar o HPA (Horizontal Pod Autoscaler) para nossas aplica√ß√µes em produ√ß√£o. Com essa configura√ß√£o, nossa aplica√ß√£o ganhar√° escalabilidade autom√°tica para lidar com um alto volume de acessos e desescalar quando a demanda diminuir. Dessa forma, a gataria usar√° somente os recursos necess√°rios.

Iniciaremos criando nossos manifestos .yml manualmente no Kubernetes para um aprendizado mais s√≥lido. Mas, logo em seguida, vamos adotar o Helm! Essa ferramenta tornar√° nossa vida muito mais f√°cil com o Kubernetes, facilitando o gerenciamento e a implanta√ß√£o de recursos.

Acreditamos que o conte√∫do sobre Kubernetes que estamos abordando √© excelente para o aprendizado. A partir do 3¬∫ m√≥dulo, ser√° apenas Kubernetes
      </>
    ),
  },
  {
    title: 'MONITOR',
    Svg: require('@site/static/img/homepagefeatures/monitor.svg').default,
    description: (
      <>
        Monitoramento moderno √© que propomos a ensinar voc√™s!

E para isto vamos seguir 2 conceitos:

4 Sinais de ouro da mat√©ria do Google SRE (Site Reliability Engineering) e os 3 Pilares da Observabilidade.

Para alcan√ßar nossos objetivos, precisaremos utilizar algumas ferramentas. Come√ßaremos com a j√° consolidada stack de DevOps (Prometheus, Grafana e Loki), e em seguida, adotaremos Tracings. √â a√≠ que entra o Open Telemetry! Vamos aprender a instrumentar o c√≥digo da nossa Gataria usando bibliotecas de Auto Instrumenta√ß√£o e para a parte visual, contaremos com o poderoso SigNoz.

O SigNoz √© um APM (Application Performance Monitoring) e representa um conceito avan√ßado em monitoramento! Mas n√£o se preocupe, teremos uma aula sobre o que √© um APM, para que todos fiquem por dentro.

Voc√™ sabia que o Open Telemetry √© capaz de coletar M√©tricas, Tracings e Logs? Isso proporciona uma plataforma √∫nica e completa de monitoramento! Mas vamos deixar esse assunto para o curso, que ser√° incr√≠vel! 
      </>
    ),
  },
  {
    title: 'PLAN',
    Svg: require('@site/static/img/homepagefeatures/plan.svg').default,
    description: (
      <>
       E chegamos na nossa √∫ltima etapa: Plan.

J√° falamos que quando o c√≥digo chega a produ√ß√£o √© um momento especial, n√©? E voc√™s conhecem o conceito do CHANGELOG? Precisamos saber o que foi implementado, saber rastrear qual c√≥digo subiu exatamente na nova vers√£o. E faremos isso com o RELEASE do GitHub. Definimos na nossa estrat√©gia de Git Flow que a branch de produ√ß√£o s√≥ aceita c√≥digo via Pull Request, e tamb√©m h√° as issues, com as descri√ß√µes do que os devs deveriam fazer.

Assim, nessa etapa, vamos automatizar esse rastreio! Ap√≥s lan√ßarmos o release, al√©m da troca do n√∫mero do nosso SemVer, ser√° criado um release no GitHub com os Pull Requests e Tickets atrelados a ele que subiram nessa vers√£o. 

E como todo time bom tem uma documenta√ß√£o t√©cnica boa! Apresentamos o Docusaurus para ser a documenta√ß√£o da Gataria. E assim, esse carinha tem um lugar especial no nosso cora√ß√£o. 

Voc√™ sabia que o c√≥digo da rawdevops.io √© feito com Docusaurus? E melhor ainda, nosso c√≥digo √© aberto \o/ E caso queiram conferir, √© s√≥ acessarem o projeto no GitHub: github.com/rawdevops/rawdevops.io 
      </>
    ),
  },
];

function Feature({ title, Svg, description }: FeatureItem) {
  return (
    <div className={clsx('col col--6')}>
      <div className="text--center">
        <Svg className={styles.featureSvg} role="img" />
      </div>
      <div className="text--left padding-horiz--md">
        <h3 className="text--center">{title}</h3>
        <p>{description}</p>
      </div>
    </div>
  );
}

export default function HomepageFeatures(): JSX.Element {
  return (
    <section className={styles.features}>
      <div className="container">
        <div className="row">
          {FeatureList.map((props, idx) => (
            <Feature key={idx} {...props} />
          ))}
        </div>
      </div>
    </section>
  );
}
